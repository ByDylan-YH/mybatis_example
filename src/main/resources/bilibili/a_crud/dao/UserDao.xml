<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bilibili.a_crud.dao.UserDao">
    <!-- 如果对象属性与表列不匹配,则需要配置查询结果的列名和实体类的属性名的对应关系 -->
    <!--    <resultMap id="userMap" type="uSeR">-->
    <!--        &lt;!&ndash; 主键字段的对应 &ndash;&gt;-->
    <!--        <id property="userId" column="id"/>-->
    <!--        &lt;!&ndash;非主键字段的对应&ndash;&gt;-->
    <!--        <result property="userName" column="username"/>-->
    <!--        <result property="userAddress" column="address"/>-->
    <!--        <result property="userSex" column="sex"/>-->
    <!--        <result property="userBirthday" column="birthday"/>-->
    <!--    </resultMap>-->

    <!-- 了解的内容：抽取重复的sql语句-->
<!--    <sql id="defaultUser">-->
<!--        select * from user;-->
<!--    </sql>-->

<!--    &lt;!&ndash; 查询所有 &ndash;&gt;-->
<!--    <select id="findAll" resultMap="userMap">-->
<!--        <include refid="defaultUser"/>-->
<!--    </select>-->

    <!--    查询所有-->
    <select id="findAll" resultType="bilibili.a_crud.entity.User">
        select *
        from user;
    </select>

    <!-- 保存用户,parameterType 传入参数 -->
    <insert id="saveUser" parameterType="bilibili.a_crud.entity.User">
        <!-- 配置插入操作后，获取插入数据的id -->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,`password`) values(#{username},#{password});
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="bilibili.a_crud.entity.User">
        update user
        set username=#{username},
            `password`=#{password}
        where id = #{id};
    </update>

    <!-- 删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete
        from user
        where id = #{id};
    </delete>

    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultType="bilibili.a_crud.entity.User">
        select *
        from user
        where id = #{id};
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="string" resultType="bilibili.a_crud.entity.User">
        select * from user where username like #{name};
        <!-- select * from user where username like '%${value}%'-->
    </select>

    <!-- 获取用户的总记录条数 -->
    <select id="findTotal" resultType="int">
        select count(id)
        from user;
    </select>

    <!-- 根据queryVo的条件查询用户 -->
    <select id="findUserByVo" parameterType="bilibili.a_crud.entity.QueryVo" resultType="bilibili.a_crud.entity.User">
        select *
        from user
        where username like #{user.username};
    </select>

    <!--    根据条件查询-->
    <select id="findUserByCondition" resultType="bilibili.a_crud.entity.User"
            parameterType="bilibili.a_crud.entity.User">
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="password != null">
                and `password` = #{password}
            </if>
        </where>
    </select>


    <!-- 根据queryvo中的Id集合实现查询用户列表 -->
    <select id="findUserInIds" resultType="bilibili.a_crud.entity.User" parameterType="bilibili.a_crud.entity.QueryVo">
        select * from user
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>